// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.29.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/simple.dart';
import 'api/streamer_api.dart';
import 'api/streamer_model.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.io.dart' if (dart.library.html) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.initApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.0.0-dev.29';

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib_sussy_stash',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  String greet({required String name, dynamic hint});

  Future<void> initApp({dynamic hint});

  Future<StreamersResponse> getCategory(
      {required StreamerType type, dynamic hint});

  Future<StreamerVideoResponse> getMoreVideos(
      {required String url, dynamic hint});

  Future<StreamerVideoResponse> getVideos({required String url, dynamic hint});

  String streamerTypeToString({required StreamerType that, dynamic hint});
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  String greet({required String name, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(name);
        return wire.wire_greet(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kGreetConstMeta,
      argValues: [name],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGreetConstMeta => const TaskConstMeta(
        debugName: "greet",
        argNames: ["name"],
      );

  @override
  Future<void> initApp({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_init_app(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kInitAppConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  Future<StreamersResponse> getCategory(
      {required StreamerType type, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_streamer_type(type);
        return wire.wire_get_category(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_streamers_response,
        decodeErrorData: null,
      ),
      constMeta: kGetCategoryConstMeta,
      argValues: [type],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetCategoryConstMeta => const TaskConstMeta(
        debugName: "get_category",
        argNames: ["type"],
      );

  @override
  Future<StreamerVideoResponse> getMoreVideos(
      {required String url, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(url);
        return wire.wire_get_more_videos(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_streamer_video_response,
        decodeErrorData: null,
      ),
      constMeta: kGetMoreVideosConstMeta,
      argValues: [url],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetMoreVideosConstMeta => const TaskConstMeta(
        debugName: "get_more_videos",
        argNames: ["url"],
      );

  @override
  Future<StreamerVideoResponse> getVideos({required String url, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(url);
        return wire.wire_get_videos(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_streamer_video_response,
        decodeErrorData: null,
      ),
      constMeta: kGetVideosConstMeta,
      argValues: [url],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetVideosConstMeta => const TaskConstMeta(
        debugName: "get_videos",
        argNames: ["url"],
      );

  @override
  String streamerTypeToString({required StreamerType that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_streamer_type(that);
        return wire.wire_StreamerType_to_string(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kStreamerTypeToStringConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kStreamerTypeToStringConstMeta => const TaskConstMeta(
        debugName: "StreamerType_to_string",
        argNames: ["that"],
      );

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<Streamer> dco_decode_list_streamer(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_streamer).toList();
  }

  @protected
  List<StreamerVideo> dco_decode_list_streamer_video(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_streamer_video).toList();
  }

  @protected
  Streamer dco_decode_streamer(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return Streamer(
      type: dco_decode_streamer_type(arr[0]),
      name: dco_decode_String(arr[1]),
      nameEn: dco_decode_String(arr[2]),
      icon: dco_decode_String(arr[3]),
      url: dco_decode_String(arr[4]),
    );
  }

  @protected
  StreamerType dco_decode_streamer_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return StreamerType.values[raw as int];
  }

  @protected
  StreamerVideo dco_decode_streamer_video(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return StreamerVideo(
      url: dco_decode_String(arr[0]),
      title: dco_decode_String(arr[1]),
      uploaded: dco_decode_String(arr[2]),
      cover: dco_decode_String(arr[3]),
      src: dco_decode_String(arr[4]),
    );
  }

  @protected
  StreamerVideoResponse dco_decode_streamer_video_response(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return StreamerVideoResponse(
      ok: dco_decode_bool(arr[0]),
      msg: dco_decode_String(arr[1]),
      videos: dco_decode_list_streamer_video(arr[2]),
    );
  }

  @protected
  StreamersResponse dco_decode_streamers_response(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return StreamersResponse(
      ok: dco_decode_bool(arr[0]),
      msg: dco_decode_String(arr[1]),
      streamers: dco_decode_list_streamer(arr[2]),
    );
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<Streamer> sse_decode_list_streamer(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Streamer>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_streamer(deserializer));
    }
    return ans_;
  }

  @protected
  List<StreamerVideo> sse_decode_list_streamer_video(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <StreamerVideo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_streamer_video(deserializer));
    }
    return ans_;
  }

  @protected
  Streamer sse_decode_streamer(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_type = sse_decode_streamer_type(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_nameEn = sse_decode_String(deserializer);
    var var_icon = sse_decode_String(deserializer);
    var var_url = sse_decode_String(deserializer);
    return Streamer(
        type: var_type,
        name: var_name,
        nameEn: var_nameEn,
        icon: var_icon,
        url: var_url);
  }

  @protected
  StreamerType sse_decode_streamer_type(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return StreamerType.values[inner];
  }

  @protected
  StreamerVideo sse_decode_streamer_video(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_url = sse_decode_String(deserializer);
    var var_title = sse_decode_String(deserializer);
    var var_uploaded = sse_decode_String(deserializer);
    var var_cover = sse_decode_String(deserializer);
    var var_src = sse_decode_String(deserializer);
    return StreamerVideo(
        url: var_url,
        title: var_title,
        uploaded: var_uploaded,
        cover: var_cover,
        src: var_src);
  }

  @protected
  StreamerVideoResponse sse_decode_streamer_video_response(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_ok = sse_decode_bool(deserializer);
    var var_msg = sse_decode_String(deserializer);
    var var_videos = sse_decode_list_streamer_video(deserializer);
    return StreamerVideoResponse(ok: var_ok, msg: var_msg, videos: var_videos);
  }

  @protected
  StreamersResponse sse_decode_streamers_response(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_ok = sse_decode_bool(deserializer);
    var var_msg = sse_decode_String(deserializer);
    var var_streamers = sse_decode_list_streamer(deserializer);
    return StreamersResponse(
        ok: var_ok, msg: var_msg, streamers: var_streamers);
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  bool cst_encode_bool(bool raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  int cst_encode_i_32(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  int cst_encode_streamer_type(StreamerType raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_i_32(raw.index);
  }

  @protected
  int cst_encode_u_8(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  void cst_encode_unit(void raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_streamer(List<Streamer> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_streamer(item, serializer);
    }
  }

  @protected
  void sse_encode_list_streamer_video(
      List<StreamerVideo> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_streamer_video(item, serializer);
    }
  }

  @protected
  void sse_encode_streamer(Streamer self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_streamer_type(self.type, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.nameEn, serializer);
    sse_encode_String(self.icon, serializer);
    sse_encode_String(self.url, serializer);
  }

  @protected
  void sse_encode_streamer_type(StreamerType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_streamer_video(StreamerVideo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.url, serializer);
    sse_encode_String(self.title, serializer);
    sse_encode_String(self.uploaded, serializer);
    sse_encode_String(self.cover, serializer);
    sse_encode_String(self.src, serializer);
  }

  @protected
  void sse_encode_streamer_video_response(
      StreamerVideoResponse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self.ok, serializer);
    sse_encode_String(self.msg, serializer);
    sse_encode_list_streamer_video(self.videos, serializer);
  }

  @protected
  void sse_encode_streamers_response(
      StreamersResponse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self.ok, serializer);
    sse_encode_String(self.msg, serializer);
    sse_encode_list_streamer(self.streamers, serializer);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }
}
