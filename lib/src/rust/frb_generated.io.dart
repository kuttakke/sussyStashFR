// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.29.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/simple.dart';
import 'api/streamer_api.dart';
import 'api/streamer_model.dart';
import 'dart:async';
import 'dart:convert';
import 'dart:ffi' as ffi;
import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_io.dart';

abstract class RustLibApiImplPlatform extends BaseApiImpl<RustLibWire> {
  RustLibApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @protected
  String dco_decode_String(dynamic raw);

  @protected
  bool dco_decode_bool(dynamic raw);

  @protected
  int dco_decode_i_32(dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw);

  @protected
  List<Streamer> dco_decode_list_streamer(dynamic raw);

  @protected
  List<StreamerVideo> dco_decode_list_streamer_video(dynamic raw);

  @protected
  Streamer dco_decode_streamer(dynamic raw);

  @protected
  StreamerType dco_decode_streamer_type(dynamic raw);

  @protected
  StreamerVideo dco_decode_streamer_video(dynamic raw);

  @protected
  StreamerVideoResponse dco_decode_streamer_video_response(dynamic raw);

  @protected
  StreamersResponse dco_decode_streamers_response(dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  String sse_decode_String(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer);

  @protected
  List<Streamer> sse_decode_list_streamer(SseDeserializer deserializer);

  @protected
  List<StreamerVideo> sse_decode_list_streamer_video(
      SseDeserializer deserializer);

  @protected
  Streamer sse_decode_streamer(SseDeserializer deserializer);

  @protected
  StreamerType sse_decode_streamer_type(SseDeserializer deserializer);

  @protected
  StreamerVideo sse_decode_streamer_video(SseDeserializer deserializer);

  @protected
  StreamerVideoResponse sse_decode_streamer_video_response(
      SseDeserializer deserializer);

  @protected
  StreamersResponse sse_decode_streamers_response(SseDeserializer deserializer);

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_String(String raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_list_prim_u_8_strict(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_list_prim_u_8_strict(
      Uint8List raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_prim_u_8_strict(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_streamer> cst_encode_list_streamer(
      List<Streamer> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_streamer(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_streamer(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_streamer_video> cst_encode_list_streamer_video(
      List<StreamerVideo> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_streamer_video(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_streamer_video(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  void cst_api_fill_to_wire_streamer(
      Streamer apiObj, wire_cst_streamer wireObj) {
    wireObj.type_ = cst_encode_streamer_type(apiObj.type);
    wireObj.name = cst_encode_String(apiObj.name);
    wireObj.name_en = cst_encode_String(apiObj.nameEn);
    wireObj.icon = cst_encode_String(apiObj.icon);
    wireObj.url = cst_encode_String(apiObj.url);
  }

  @protected
  void cst_api_fill_to_wire_streamer_video(
      StreamerVideo apiObj, wire_cst_streamer_video wireObj) {
    wireObj.url = cst_encode_String(apiObj.url);
    wireObj.title = cst_encode_String(apiObj.title);
    wireObj.uploaded = cst_encode_String(apiObj.uploaded);
    wireObj.cover = cst_encode_String(apiObj.cover);
    wireObj.src = cst_encode_String(apiObj.src);
  }

  @protected
  void cst_api_fill_to_wire_streamer_video_response(
      StreamerVideoResponse apiObj, wire_cst_streamer_video_response wireObj) {
    wireObj.ok = cst_encode_bool(apiObj.ok);
    wireObj.msg = cst_encode_String(apiObj.msg);
    wireObj.videos = cst_encode_list_streamer_video(apiObj.videos);
  }

  @protected
  void cst_api_fill_to_wire_streamers_response(
      StreamersResponse apiObj, wire_cst_streamers_response wireObj) {
    wireObj.ok = cst_encode_bool(apiObj.ok);
    wireObj.msg = cst_encode_String(apiObj.msg);
    wireObj.streamers = cst_encode_list_streamer(apiObj.streamers);
  }

  @protected
  bool cst_encode_bool(bool raw);

  @protected
  int cst_encode_i_32(int raw);

  @protected
  int cst_encode_streamer_type(StreamerType raw);

  @protected
  int cst_encode_u_8(int raw);

  @protected
  void cst_encode_unit(void raw);

  @protected
  void sse_encode_String(String self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer);

  @protected
  void sse_encode_list_streamer(List<Streamer> self, SseSerializer serializer);

  @protected
  void sse_encode_list_streamer_video(
      List<StreamerVideo> self, SseSerializer serializer);

  @protected
  void sse_encode_streamer(Streamer self, SseSerializer serializer);

  @protected
  void sse_encode_streamer_type(StreamerType self, SseSerializer serializer);

  @protected
  void sse_encode_streamer_video(StreamerVideo self, SseSerializer serializer);

  @protected
  void sse_encode_streamer_video_response(
      StreamerVideoResponse self, SseSerializer serializer);

  @protected
  void sse_encode_streamers_response(
      StreamersResponse self, SseSerializer serializer);

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);
}

// Section: wire_class

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names
// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class RustLibWire implements BaseWire {
  factory RustLibWire.fromExternalLibrary(ExternalLibrary lib) =>
      RustLibWire(lib.ffiDynamicLibrary);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RustLibWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  RustLibWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  WireSyncRust2DartDco wire_greet(
    ffi.Pointer<wire_cst_list_prim_u_8_strict> name,
  ) {
    return _wire_greet(
      name,
    );
  }

  late final _wire_greetPtr = _lookup<
          ffi.NativeFunction<
              WireSyncRust2DartDco Function(
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
      'frbgen_sussy_stash_wire_greet');
  late final _wire_greet = _wire_greetPtr.asFunction<
      WireSyncRust2DartDco Function(
          ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire_init_app(
    int port_,
  ) {
    return _wire_init_app(
      port_,
    );
  }

  late final _wire_init_appPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'frbgen_sussy_stash_wire_init_app');
  late final _wire_init_app =
      _wire_init_appPtr.asFunction<void Function(int)>();

  void wire_get_category(
    int port_,
    int type_,
  ) {
    return _wire_get_category(
      port_,
      type_,
    );
  }

  late final _wire_get_categoryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32)>>(
          'frbgen_sussy_stash_wire_get_category');
  late final _wire_get_category =
      _wire_get_categoryPtr.asFunction<void Function(int, int)>();

  void wire_get_more_videos(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> url,
  ) {
    return _wire_get_more_videos(
      port_,
      url,
    );
  }

  late final _wire_get_more_videosPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
      'frbgen_sussy_stash_wire_get_more_videos');
  late final _wire_get_more_videos = _wire_get_more_videosPtr.asFunction<
      void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire_get_videos(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> url,
  ) {
    return _wire_get_videos(
      port_,
      url,
    );
  }

  late final _wire_get_videosPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
      'frbgen_sussy_stash_wire_get_videos');
  late final _wire_get_videos = _wire_get_videosPtr.asFunction<
      void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  WireSyncRust2DartDco wire_StreamerType_to_string(
    int that,
  ) {
    return _wire_StreamerType_to_string(
      that,
    );
  }

  late final _wire_StreamerType_to_stringPtr =
      _lookup<ffi.NativeFunction<WireSyncRust2DartDco Function(ffi.Int32)>>(
          'frbgen_sussy_stash_wire_StreamerType_to_string');
  late final _wire_StreamerType_to_string = _wire_StreamerType_to_stringPtr
      .asFunction<WireSyncRust2DartDco Function(int)>();

  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_new_list_prim_u_8_strict(
    int len,
  ) {
    return _cst_new_list_prim_u_8_strict(
      len,
    );
  }

  late final _cst_new_list_prim_u_8_strictPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_prim_u_8_strict> Function(
              ffi.Int32)>>('frbgen_sussy_stash_cst_new_list_prim_u_8_strict');
  late final _cst_new_list_prim_u_8_strict = _cst_new_list_prim_u_8_strictPtr
      .asFunction<ffi.Pointer<wire_cst_list_prim_u_8_strict> Function(int)>();

  ffi.Pointer<wire_cst_list_streamer> cst_new_list_streamer(
    int len,
  ) {
    return _cst_new_list_streamer(
      len,
    );
  }

  late final _cst_new_list_streamerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_streamer> Function(
              ffi.Int32)>>('frbgen_sussy_stash_cst_new_list_streamer');
  late final _cst_new_list_streamer = _cst_new_list_streamerPtr
      .asFunction<ffi.Pointer<wire_cst_list_streamer> Function(int)>();

  ffi.Pointer<wire_cst_list_streamer_video> cst_new_list_streamer_video(
    int len,
  ) {
    return _cst_new_list_streamer_video(
      len,
    );
  }

  late final _cst_new_list_streamer_videoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_streamer_video> Function(
              ffi.Int32)>>('frbgen_sussy_stash_cst_new_list_streamer_video');
  late final _cst_new_list_streamer_video = _cst_new_list_streamer_videoPtr
      .asFunction<ffi.Pointer<wire_cst_list_streamer_video> Function(int)>();

  int dummy_method_to_enforce_bundling() {
    return _dummy_method_to_enforce_bundling();
  }

  late final _dummy_method_to_enforce_bundlingPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>(
          'dummy_method_to_enforce_bundling');
  late final _dummy_method_to_enforce_bundling =
      _dummy_method_to_enforce_bundlingPtr.asFunction<int Function()>();
}

typedef DartPostCObjectFnType
    = ffi.Pointer<ffi.NativeFunction<DartPostCObjectFnTypeFunction>>;
typedef DartPostCObjectFnTypeFunction = ffi.Bool Function(
    DartPort port_id, ffi.Pointer<ffi.Void> message);
typedef DartDartPostCObjectFnTypeFunction = bool Function(
    DartDartPort port_id, ffi.Pointer<ffi.Void> message);
typedef DartPort = ffi.Int64;
typedef DartDartPort = int;

final class wire_cst_list_prim_u_8_strict extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_streamer extends ffi.Struct {
  @ffi.Int32()
  external int type_;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> name;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> name_en;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> icon;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> url;
}

final class wire_cst_list_streamer extends ffi.Struct {
  external ffi.Pointer<wire_cst_streamer> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_streamer_video extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> url;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> title;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> uploaded;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> cover;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> src;
}

final class wire_cst_list_streamer_video extends ffi.Struct {
  external ffi.Pointer<wire_cst_streamer_video> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_streamer_video_response extends ffi.Struct {
  @ffi.Bool()
  external bool ok;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> msg;

  external ffi.Pointer<wire_cst_list_streamer_video> videos;
}

final class wire_cst_streamers_response extends ffi.Struct {
  @ffi.Bool()
  external bool ok;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> msg;

  external ffi.Pointer<wire_cst_list_streamer> streamers;
}
