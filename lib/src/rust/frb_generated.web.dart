// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.29.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/simple.dart';
import 'api/streamer_api.dart';
import 'api/streamer_model.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_web.dart';

abstract class RustLibApiImplPlatform extends BaseApiImpl<RustLibWire> {
  RustLibApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @protected
  String dco_decode_String(dynamic raw);

  @protected
  bool dco_decode_bool(dynamic raw);

  @protected
  int dco_decode_i_32(dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw);

  @protected
  List<Streamer> dco_decode_list_streamer(dynamic raw);

  @protected
  List<StreamerVideo> dco_decode_list_streamer_video(dynamic raw);

  @protected
  Streamer dco_decode_streamer(dynamic raw);

  @protected
  StreamerType dco_decode_streamer_type(dynamic raw);

  @protected
  StreamerVideo dco_decode_streamer_video(dynamic raw);

  @protected
  StreamerVideoResponse dco_decode_streamer_video_response(dynamic raw);

  @protected
  StreamersResponse dco_decode_streamers_response(dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  String sse_decode_String(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer);

  @protected
  List<Streamer> sse_decode_list_streamer(SseDeserializer deserializer);

  @protected
  List<StreamerVideo> sse_decode_list_streamer_video(
      SseDeserializer deserializer);

  @protected
  Streamer sse_decode_streamer(SseDeserializer deserializer);

  @protected
  StreamerType sse_decode_streamer_type(SseDeserializer deserializer);

  @protected
  StreamerVideo sse_decode_streamer_video(SseDeserializer deserializer);

  @protected
  StreamerVideoResponse sse_decode_streamer_video_response(
      SseDeserializer deserializer);

  @protected
  StreamersResponse sse_decode_streamers_response(SseDeserializer deserializer);

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  String cst_encode_String(String raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  Uint8List cst_encode_list_prim_u_8_strict(Uint8List raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  List<dynamic> cst_encode_list_streamer(List<Streamer> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw.map(cst_encode_streamer).toList();
  }

  @protected
  List<dynamic> cst_encode_list_streamer_video(List<StreamerVideo> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw.map(cst_encode_streamer_video).toList();
  }

  @protected
  List<dynamic> cst_encode_streamer(Streamer raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_streamer_type(raw.type),
      cst_encode_String(raw.name),
      cst_encode_String(raw.nameEn),
      cst_encode_String(raw.icon),
      cst_encode_String(raw.url)
    ];
  }

  @protected
  List<dynamic> cst_encode_streamer_video(StreamerVideo raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_String(raw.url),
      cst_encode_String(raw.title),
      cst_encode_String(raw.uploaded),
      cst_encode_String(raw.cover),
      cst_encode_String(raw.src)
    ];
  }

  @protected
  List<dynamic> cst_encode_streamer_video_response(StreamerVideoResponse raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_bool(raw.ok),
      cst_encode_String(raw.msg),
      cst_encode_list_streamer_video(raw.videos)
    ];
  }

  @protected
  List<dynamic> cst_encode_streamers_response(StreamersResponse raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_bool(raw.ok),
      cst_encode_String(raw.msg),
      cst_encode_list_streamer(raw.streamers)
    ];
  }

  @protected
  bool cst_encode_bool(bool raw);

  @protected
  int cst_encode_i_32(int raw);

  @protected
  int cst_encode_streamer_type(StreamerType raw);

  @protected
  int cst_encode_u_8(int raw);

  @protected
  void cst_encode_unit(void raw);

  @protected
  void sse_encode_String(String self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer);

  @protected
  void sse_encode_list_streamer(List<Streamer> self, SseSerializer serializer);

  @protected
  void sse_encode_list_streamer_video(
      List<StreamerVideo> self, SseSerializer serializer);

  @protected
  void sse_encode_streamer(Streamer self, SseSerializer serializer);

  @protected
  void sse_encode_streamer_type(StreamerType self, SseSerializer serializer);

  @protected
  void sse_encode_streamer_video(StreamerVideo self, SseSerializer serializer);

  @protected
  void sse_encode_streamer_video_response(
      StreamerVideoResponse self, SseSerializer serializer);

  @protected
  void sse_encode_streamers_response(
      StreamersResponse self, SseSerializer serializer);

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);
}

// Section: wire_class

class RustLibWire implements BaseWire {
  RustLibWire.fromExternalLibrary(ExternalLibrary lib);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncRust2DartDco */
      wire_greet(String name) => wasmModule.wire_greet(name);

  void wire_init_app(NativePortType port_) => wasmModule.wire_init_app(port_);

  void wire_get_category(NativePortType port_, int type_) =>
      wasmModule.wire_get_category(port_, type_);

  void wire_get_more_videos(NativePortType port_, String url) =>
      wasmModule.wire_get_more_videos(port_, url);

  void wire_get_videos(NativePortType port_, String url) =>
      wasmModule.wire_get_videos(port_, url);

  dynamic /* flutter_rust_bridge::for_generated::WireSyncRust2DartDco */
      wire_StreamerType_to_string(int that) =>
          wasmModule.wire_StreamerType_to_string(that);
}

@JS('wasm_bindgen')
external RustLibWasmModule get wasmModule;

@JS()
@anonymous
class RustLibWasmModule implements WasmModule {
  @override
  external Object /* Promise */ call([String? moduleName]);

  @override
  external RustLibWasmModule bind(dynamic thisArg, String moduleName);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncRust2DartDco */
      wire_greet(String name);

  external void wire_init_app(NativePortType port_);

  external void wire_get_category(NativePortType port_, int type_);

  external void wire_get_more_videos(NativePortType port_, String url);

  external void wire_get_videos(NativePortType port_, String url);

  external dynamic /* flutter_rust_bridge::for_generated::WireSyncRust2DartDco */
      wire_StreamerType_to_string(int that);
}
